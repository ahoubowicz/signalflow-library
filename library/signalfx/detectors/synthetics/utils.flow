DEFAULT_RESOLUTION = 60000
AUTO_RESOLVE_AFTER = duration('1d')

DEFAULT_ALLOW_MISSING = ['test', 'location']


def get_group_by(use_location=False):
    group_by = [
        'sf_metric',
        'test_id',
        'test',
        'test_type',
    ]
    if use_location is True:
        return group_by + ['location_id', 'location']
    else:
        return group_by


def merge_filters(filter_=None, exclude_errors=False):
    if exclude_errors is True:
        scope = filter_ and filter('failed', 'false')
    else:
        scope = filter_

    return scope


def annotate_stream(stream, label):
    return annotate(stream, label, {'sfui_streamType': 'signal'})


def get_condition_identifier(orientation):
    return 'stream_' + str(orientation) + '_ft'


def annotate_fire_threshold(threshold_stream, label='fire_threshold', orientation='above'):
    condition_identifier = get_condition_identifier(orientation)
    threshold_ui_config = '{"' + condition_identifier + '": {"sfui_streamType":"threshold","sfui_state":"fire","sfui_orientation":"' + \
                              str(orientation) + '"}}'

    return annotate(threshold_stream, label, {'sfui_config': threshold_ui_config})


def annotate_event(resource_type, fire_threshold, orientation):
    readable_condition = str(resource_type) + ' is ' + str(orientation) + ' ' + str(fire_threshold)
    condition_identifier = get_condition_identifier(orientation)
    event_ann = {
        'fire_threshold': str(fire_threshold),
        'resource_type': str(resource_type),
        'sfui_incidentInformation': '[{"selectedIdentifiers":["fire_threshold_stream","stream"],"conditionIdentifier":"' +
                                    condition_identifier +
                                    '","readableCondition":"' +
                                    readable_condition + '","builtInFunction":"signalfx.detectors.synthetics"}]',
    }
    return event_ann


def assert_threshold(fire_threshold, clear_threshold, orientation):
    if clear_threshold is None:
        return
    if orientation == 'above':
        assert fire_threshold >= clear_threshold, {
            'fire_threshold': fire_threshold, 'clear_threshold': clear_threshold,
            'sfui_errorKeys': ['fire_threshold', 'clear_threshold'],
            'sfui_errorTemplate': "{{{fire_threshold}}} must be greater than or equal to {{{clear_threshold}}}."}
    elif orientation == 'below':
        assert fire_threshold <= clear_threshold, {
            'fire_threshold': fire_threshold, 'clear_threshold': clear_threshold,
            'sfui_errorKeys': ['fire_threshold', 'clear_threshold'],
            'sfui_errorTemplate': '{{{fire_threshold}}} must be less than or equal to {{{clear_threshold}}}.'}
    else:
        assert 0 > 1, {
            'orientation': orientation,
            'sfui_errorKeys': ['orientation'],
            'sfui_errorTemplate': '{{{orientation}}} threshold orientation is not supported'
        }


def directional_condition(stream, fire_threshold_stream, orientation):
    if orientation == 'above':
        return when(stream > fire_threshold_stream)
    elif orientation == 'below':
        return when(stream < fire_threshold_stream)
    else:
        assert 0 > 1


def shift_resolution_condition(stream, fire_threshold_stream, orientation, shifts_num):
    if shifts_num < 1:
        return when(const(1) > 0)

    first_shift = stream - stream.delta()
    first_cond = directional_condition(first_shift, fire_threshold_stream, orientation)

    if shifts_num == 1:
        return first_cond
    elif shifts_num == 2:
        second_shift = first_shift - first_shift.delta()
        return first_cond and directional_condition(second_shift, fire_threshold_stream, orientation)
    else:
        assert 0 > 1

