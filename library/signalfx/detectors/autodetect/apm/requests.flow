from signalfx.detectors.autodetect import utils
from signalfx.detectors.apm.requests import streams
from signalfx.detectors.apm.requests.sudden_change_v2 import sudden_change


def request_rate_mean_std_detector(current_window: duration = duration('10m'),
                                   historical_window: duration = duration('1h'),
                                   fire_num_stddev: float = 3.0,
                                   clear_num_stddev: float = 2.5,
                                   filter_: filter = None):
    # :param current_window label=Current window
    # :param current_window description=Time window to test for anomalous values
    # :param historical_window label=Historical window
    # :param historical_window description=Time window to use for historical normal values
    # :param fire_num_stddev label=Trigger threshold
    # :param fire_num_stddev description=Trigger the alert when the current value is greater than this number of deviations above historical norm
    # :param clear_num_stddev label=Clear growth threshold
    # :param clear_num_stddev description=Clear the alert when the current value is less than this number of deviations above historical norm
    # :param filter_ metric_name=service.request.count
    # :param filter_ dimensions=sf_environment,sf_service
    # :return: detect block that triggers when request rate is too many deviations from the norm established in the preceding window

    streams.request_rate(filter_=filter_, resource_type='service').publish('Request Rate')
    return sudden_change.detector_mean_std(current_window=current_window, historical_window=historical_window,
                                           fire_num_stddev=fire_num_stddev,
                                           clear_num_stddev=clear_num_stddev,
                                           filter_=filter_, resource_type='service',
                                           auto_resolve_after=utils.AUTO_RESOLVE_AFTER)
