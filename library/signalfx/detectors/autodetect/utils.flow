AUTO_RESOLVE_AFTER = duration('1d')

HOST_DIM = 'host'
NAMESPACE_DIM = 'namespace'
STAT_DIM = 'stat'


def annotate_stream(stream, label):
    return annotate(stream, label, {'sfui_streamType': 'signal'})


def annotate_fire_threshold(threshold_stream, label='fire_threshold', orientation=None):
    if orientation is not None:
        threshold_ui_config = '{"stream_' + orientation + \
                              '_ft": {"sfui_streamType":"threshold","sfui_state":"fire","sfui_orientation":"' + \
                              orientation + '"}}'
    else:
        threshold_ui_config = '{"stream_out_of_ft": {"sfui_streamType":"threshold","sfui_state":"fire"}}'
    return annotate(threshold_stream, label, {'sfui_config': threshold_ui_config})


def threshold_validation_err_msg(fire_threshold, clear_threshold, orientation):
    assert orientation == 'above' or orientation == 'below'
    if orientation == 'above':
        msg_str = 'greater'
    elif orientation == 'below':
        msg_str = 'less'

    return {
            'fire_threshold': fire_threshold, 'clear_threshold': clear_threshold,
            'sfui_errorKeys': ['fire_threshold', 'clear_threshold'],
            'sfui_errorTemplate': "{{{fire_threshold}}} must be " + msg_str + " than or equal to {{{clear_threshold}}}."}


def merge_filters(scope_filter, filter_):
    if filter_ is not None:
        return scope_filter and filter_
    else:
        return scope_filter
