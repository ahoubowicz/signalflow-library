from signalfx.detectors.apm.latency import streams, conditions
from signalfx.detectors.apm import utils


def growth_rate(pctile=90, filter_=None, current_window=duration('5m'),
                historical_window=duration('1h'),
                fire_growth_rate_threshold=0.2, clear_growth_rate_threshold=0.1,
                exclude_errors=True, group_by=None, volume_static_threshold=None,
                volume_relative_threshold=None, vol_pctile_req_pos=95, custom_filter=None,
                use_kind_filter=True, kind_filter=utils.KIND_FILTER,
                exclude_errors_filter=utils.EXCLUDE_ERRORS_FILTER,
                default_group_by=utils.DEFAULT_GROUPBY,
                default_allow_missing=utils.DEFAULT_ALLOW_MISSING,
                metric_names=utils.PCTILE_TO_METRIC, auto_resolve_after=None):
    # Detect when latency grows by a specified amount relative to the immediately preceding window
    # :param pctile (number): percentile to monitor, one of 50, 90, 99, default=90
    # :param filter_ (filter): specifies dimensional scope of the detector, default=None
    # :param current_window (duration): window whose latency is evaluated for being too high,
    #                                      default=duration('5m')
    # :param historical_window (duration): window whose latency is used to define
    #                                       the baseline, default=duration('1h')
    # :param fire_growth_rate_threshold (number):  latency growth required to trigger, default=0.2
    # :param clear_growth_rate_threshold (number): latency growth required to clear, default=0.1
    # :param exclude_errors (boolean): whether to exclude error spans from latency metric, default=True
    # :param group_by (list of strings): average latency by these (in addition to default grouping
    #                    by cluster, service, operation), default=None
    # :param volume_static_threshold (number): threshold on request rate (per second) required for
    #                    alert to trigger, default=None
    # :param volume_relative_threshold (number): require request rate on window being evaluated to be
    #                    at least this proportion of request rate on preceding window (used for
    #                    trigger and clear), default=None
    # :param vol_pctile_req_pos (number, percentage): percentage of historical window permitted to
    #                    have request rate 0 (used for trigger and clear), default=95
    # :return: detect block that triggers when the specified percentile of latency, suitably
    #           filtered and grouped, over the last current_window is greater than
    #           1 + fire_growth_rate_threshold times the latency (for the same percentile,
    #           similarly filtered and grouped) of the preceding historical_window;
    #           clears when latency is less than 1 + clear_growth_rate_threshold times the baseline;
    #           plus suitable volume conditions
    current_window_ = duration(current_window)
    historical_window_ = duration(historical_window)
    assert pctile == 50 or pctile == 90 or pctile == 99, {
        'pctile': pctile,
        'sfui_errorKeys': ['pctile'],
        'sfui_errorTemplate': "{{{pctile}}} must be one of 50, 90, 99."}
    assert fire_growth_rate_threshold >= clear_growth_rate_threshold, {
        'fire_growth_rate_threshold': fire_growth_rate_threshold,
        'clear_growth_rate_threshold': clear_growth_rate_threshold,
        'sfui_errorKeys': ['fire_growth_rate_threshold', 'clear_growth_rate_threshold'],
        'sfui_errorTemplate': "{{{fire_growth_rate_threshold}}} must be greater than or equal to {{{clear_growth_rate_threshold}}}."}
    curr = streams.pctile_over_window(pctile=pctile, filter_=filter_, window=current_window_,
                                      exclude_errors=exclude_errors, group_by=group_by,
                                      custom_filter=custom_filter,
                                      use_kind_filter=use_kind_filter,
                                      kind_filter=kind_filter,
                                      exclude_errors_filter=exclude_errors_filter,
                                      default_group_by=default_group_by,
                                      default_allow_missing=default_allow_missing,
                                      metric_names=metric_names)
    hist = streams.pctile_over_window(pctile=pctile, filter_=filter_, window=historical_window_,
                                      exclude_errors=exclude_errors, group_by=group_by,
                                      custom_filter=custom_filter, use_kind_filter=use_kind_filter,
                                      kind_filter=kind_filter,
                                      exclude_errors_filter=exclude_errors_filter,
                                      default_group_by=default_group_by,
                                      default_allow_missing=default_allow_missing,
                                      metric_names=metric_names).timeshift(current_window_)
    fire_threshold = hist * (1 + fire_growth_rate_threshold)
    clear_threshold = hist * (1 + clear_growth_rate_threshold)
    ann = [annotate(curr, 'current latency', {'sfui_streamType': 'signal'}),
           annotate(hist, 'baseline',
                    {'sfui_config': '{"signal_baseline": {"sfui_streamType":"signal"}}'}),
           annotate(fire_threshold, 'fire threshold', {
               'sfui_config': '{"signal_baseline": {"sfui_streamType":"threshold","sfui_state":"fire","sfui_orientation":"above"}}'})]
    event_ann = {'percentile': str(pctile),
                 'current_window': str(current_window_),
                 'historical_window': str(historical_window_),
                 'fire_growth_rate_threshold': str(fire_growth_rate_threshold),
                 'clear_growth_rate_threshold': str(clear_growth_rate_threshold),
                 'sfui_incidentInformation': '[{"selectedIdentifiers":["curr","hist", "fire_threshold"], "conditionIdentifier":"signal_baseline"}]'}
    non_empty_cond = conditions.volume_sc_nonempty(filter_=filter_, current_window=current_window_,
                                                   historical_window=historical_window_,
                                                   exclude_errors=exclude_errors,
                                                   pctile=vol_pctile_req_pos, group_by=group_by,
                                                   custom_filter=custom_filter,
                                                   use_kind_filter=use_kind_filter,
                                                   kind_filter=kind_filter,
                                                   exclude_errors_filter=exclude_errors_filter,
                                                   default_group_by=default_group_by,
                                                   default_allow_missing=default_allow_missing,
                                                   metric_names=metric_names)
    if volume_static_threshold is not None and volume_relative_threshold is not None:
        static = conditions.static_on_volume(current_window_,
                                             volume_static_threshold,
                                             filter_=filter_,
                                             exclude_errors=exclude_errors,
                                             group_by=group_by, custom_filter=custom_filter,
                                             use_kind_filter=use_kind_filter,
                                             kind_filter=kind_filter,
                                             exclude_errors_filter=exclude_errors_filter,
                                             default_group_by=default_group_by,
                                             default_allow_missing=default_allow_missing,
                                             metric_names=metric_names)
        relative = conditions.volume_sc(filter_=filter_, current_window=current_window_,
                                        historical_window=historical_window_,
                                        fire_threshold=volume_relative_threshold,
                                        clear_threshold=volume_relative_threshold,
                                        exclude_errors=exclude_errors,
                                        group_by=group_by, custom_filter=custom_filter,
                                        use_kind_filter=use_kind_filter,
                                        kind_filter=kind_filter,
                                        exclude_errors_filter=exclude_errors_filter,
                                        default_group_by=default_group_by,
                                        default_allow_missing=default_allow_missing,
                                        metric_names=metric_names)
        on_ = static and relative['on'] and non_empty_cond
        off_ = relative['off'] and non_empty_cond
    elif volume_static_threshold is not None:
        static = conditions.static_on_volume(current_window_,
                                             volume_static_threshold,
                                             filter_=filter_,
                                             exclude_errors=exclude_errors,
                                             group_by=group_by, custom_filter=custom_filter,
                                             use_kind_filter=use_kind_filter,
                                             kind_filter=kind_filter,
                                             exclude_errors_filter=exclude_errors_filter,
                                             default_group_by=default_group_by,
                                             default_allow_missing=default_allow_missing,
                                             metric_names=metric_names)
        on_ = static and non_empty_cond
        off_ = non_empty_cond
    elif volume_relative_threshold is not None:
        relative = conditions.volume_sc(filter_=filter_, current_window=current_window_,
                                        historical_window=historical_window_,
                                        fire_threshold=volume_relative_threshold,
                                        clear_threshold=volume_relative_threshold,
                                        exclude_errors=exclude_errors, group_by=group_by,
                                        custom_filter=custom_filter,
                                        use_kind_filter=use_kind_filter,
                                        kind_filter=kind_filter,
                                        exclude_errors_filter=exclude_errors_filter,
                                        default_group_by=default_group_by,
                                        default_allow_missing=default_allow_missing,
                                        metric_names=metric_names)
        on_ = relative['on'] and non_empty_cond
        off_ = relative['off'] and non_empty_cond
    else:
        on_ = non_empty_cond
        off_ = non_empty_cond
    # "hist is not None" has no effect on the detection, but does allow for the stream
    # hist to participate in event details, e.g., the alert modal
    return detect(when(curr > fire_threshold) and on_ and hist is not None,
                  off=when(curr < clear_threshold) and off_, annotations=ann,
                  event_annotations=event_ann, auto_resolve_after=auto_resolve_after)


def deviations_from_norm(filter_=None, current_window=duration('5m'),
                         historical_window=duration('1h'), exclude_errors=True, group_by=None,
                         fire_num_dev_threshold=3.5, clear_num_dev_threshold=3,
                         volume_static_threshold=None, volume_relative_threshold=None,
                         vol_pctile_req_pos=95, custom_filter=None,
                         use_kind_filter=True, kind_filter=utils.KIND_FILTER,
                         exclude_errors_filter=utils.EXCLUDE_ERRORS_FILTER,
                         default_group_by=utils.DEFAULT_GROUPBY,
                         default_allow_missing=utils.DEFAULT_ALLOW_MISSING,
                         metric_names=utils.PCTILE_TO_METRIC, auto_resolve_after=None):
    # Detect when latency is too many deviations from the norm established in the immediately
    #       preceding window
    # :param filter_ (filter): specifies dimensional scope of the detector, default=None
    # :param current_window (duration): window whose latency is evaluated for being too high,
    #                                      default=duration('5m')
    # :param historical_window (duration): window whose latency is used to define
    #                                       the baseline, default=duration('1h')
    # :param exclude_errors (boolean): whether to exclude error spans from latency metric, default=True
    # :param group_by (list of strings): average latency by these (in addition to default grouping
    #                    by cluster, service, operation), default=None
    # :param fire_num_dev_threshold (number): number of historical (P90 - P50)'s from the historical P50
    #                                the current P50 must be in order to trigger, default=3.5
    # :param clear_num_dev_threshold (number): number of historical (P90 - P50)'s from the historical P50
    #                                the current P50 must be in order to clear, default=3
    # :param volume_static_threshold (number): threshold on request rate (per second) required for
    #                    alert to trigger, default=None
    # :param volume_relative_threshold (number): require request rate on window being evaluated to be
    #                    at least this proportion of request rate on preceding window (used for
    #                    trigger and clear), default=None
    # :param vol_pctile_req_pos (number, percentage): percentage of historical window permitted to
    #                    have request rate 0, default=95
    # :return: detect block that triggers when the latency, suitably filtered and grouped,
    #           over the last current_window is more than
    #           fire_num_dev_threshold deviations from the norm (similarly filtered and grouped),
    #           calculated on the preceding historical_window;
    #           clears when latency is less than clear_num_dev_threshold deviations from the norm;
    #           plus suitable volume conditions
    current_window_ = duration(current_window)
    historical_window_ = duration(historical_window)
    assert fire_num_dev_threshold >= clear_num_dev_threshold, {
        'fire_num_dev_threshold': fire_num_dev_threshold,
        'clear_num_dev_threshold': clear_num_dev_threshold,
        'sfui_errorKeys': ['fire_num_dev_threshold', 'clear_num_dev_threshold'],
        'sfui_errorTemplate': "{{{fire_num_dev_threshold}}} must be greater than or equal to {{{clear_num_dev_threshold}}}."}
    current_p50 = streams.pctile_over_window(pctile=50, filter_=filter_, window=current_window_,
                                             exclude_errors=exclude_errors, group_by=group_by,
                                             custom_filter=custom_filter,
                                             use_kind_filter=use_kind_filter,
                                             kind_filter=kind_filter,
                                             exclude_errors_filter=exclude_errors_filter,
                                             default_group_by=default_group_by,
                                             default_allow_missing=default_allow_missing,
                                             metric_names=metric_names)
    historical_p50 = streams.pctile_over_window(pctile=50, filter_=filter_,
                                                window=historical_window_,
                                                exclude_errors=exclude_errors,
                                                group_by=group_by,
                                                custom_filter=custom_filter,
                                                use_kind_filter=use_kind_filter,
                                                kind_filter=kind_filter,
                                                exclude_errors_filter=exclude_errors_filter,
                                                default_group_by=default_group_by,
                                                default_allow_missing=default_allow_missing,
                                                metric_names=metric_names).timeshift(
        current_window_)
    historical_p90 = streams.pctile_over_window(pctile=90, filter_=filter_,
                                                window=historical_window_,
                                                exclude_errors=exclude_errors,
                                                group_by=group_by,
                                                custom_filter=custom_filter,
                                                use_kind_filter=use_kind_filter,
                                                kind_filter=kind_filter,
                                                exclude_errors_filter=exclude_errors_filter,
                                                default_group_by=default_group_by,
                                                default_allow_missing=default_allow_missing,
                                                metric_names=metric_names).timeshift(
        current_window_)
    hist_spread = historical_p90 - historical_p50
    fire_threshold = historical_p50 + fire_num_dev_threshold * hist_spread
    clear_threshold = historical_p50 + clear_num_dev_threshold * hist_spread
    ann = [annotate(current_p50, 'current window', {'sfui_streamType': 'signal'}),
           annotate(historical_p50, 'baseline',
                    {'sfui_config': '{"signal_baseline": {"sfui_streamType":"signal"}}'}),
           annotate(fire_threshold, 'fire threshold', {
               'sfui_config': '{"signal_baseline": {"sfui_streamType":"threshold","sfui_state":"fire","sfui_orientation":"above"}}'})]
    event_ann = {'current_window': str(current_window_),
                 'historical_window': str(historical_window_),
                 'fire_num_dev_threshold': str(fire_num_dev_threshold),
                 'clear_num_dev_threshold': str(clear_num_dev_threshold),
                 'sfui_incidentInformation': '[{"selectedIdentifiers":["current_p50","historical_p50", "fire_threshold"], "conditionIdentifier":"signal_baseline"}]'}
    non_empty_cond = conditions.volume_sc_nonempty(filter_=filter_, current_window=current_window_,
                                                   historical_window=historical_window_,
                                                   exclude_errors=exclude_errors,
                                                   pctile=vol_pctile_req_pos, group_by=group_by,
                                                   custom_filter=custom_filter,
                                                   use_kind_filter=use_kind_filter,
                                                   kind_filter=kind_filter,
                                                   exclude_errors_filter=exclude_errors_filter,
                                                   default_group_by=default_group_by,
                                                   default_allow_missing=default_allow_missing,
                                                   metric_names=metric_names)
    if volume_static_threshold is not None and volume_relative_threshold is not None:
        static = conditions.static_on_volume(current_window_,
                                             volume_static_threshold,
                                             filter_=filter_,
                                             exclude_errors=exclude_errors, group_by=group_by,
                                             custom_filter=custom_filter,
                                             use_kind_filter=use_kind_filter,
                                             kind_filter=kind_filter,
                                             exclude_errors_filter=exclude_errors_filter,
                                             default_group_by=default_group_by,
                                             default_allow_missing=default_allow_missing,
                                             metric_names=metric_names)
        relative = conditions.volume_sc(filter_=filter_, current_window=current_window_,
                                        historical_window=historical_window_,
                                        fire_threshold=volume_relative_threshold,
                                        clear_threshold=volume_relative_threshold,
                                        exclude_errors=exclude_errors, group_by=group_by,
                                        custom_filter=custom_filter,
                                        use_kind_filter=use_kind_filter,
                                        kind_filter=kind_filter,
                                        exclude_errors_filter=exclude_errors_filter,
                                        default_group_by=default_group_by,
                                        default_allow_missing=default_allow_missing,
                                        metric_names=metric_names)
        on_ = static and relative['on'] and non_empty_cond
        off_ = relative['off'] and non_empty_cond
    elif volume_static_threshold is not None:
        static = conditions.static_on_volume(current_window_,
                                             volume_static_threshold,
                                             filter_=filter_,
                                             exclude_errors=exclude_errors,
                                             group_by=group_by, custom_filter=custom_filter,
                                             use_kind_filter=use_kind_filter,
                                             kind_filter=kind_filter,
                                             exclude_errors_filter=exclude_errors_filter,
                                             default_group_by=default_group_by,
                                             default_allow_missing=default_allow_missing,
                                             metric_names=metric_names)
        on_ = static and non_empty_cond
        off_ = non_empty_cond
    elif volume_relative_threshold is not None:
        relative = conditions.volume_sc(filter_=filter_, current_window=current_window_,
                                        historical_window=historical_window_,
                                        fire_threshold=volume_relative_threshold,
                                        clear_threshold=volume_relative_threshold,
                                        exclude_errors=exclude_errors, group_by=group_by,
                                        custom_filter=custom_filter,
                                        use_kind_filter=use_kind_filter,
                                        kind_filter=kind_filter,
                                        exclude_errors_filter=exclude_errors_filter,
                                        default_group_by=default_group_by,
                                        default_allow_missing=default_allow_missing,
                                        metric_names=metric_names)
        on_ = relative['on'] and non_empty_cond
        off_ = relative['off'] and non_empty_cond
    else:
        on_ = non_empty_cond
        off_ = non_empty_cond
    # "historical_p50 is not None" has no effect on the detection, but does allow for the stream
    # historical_p50 to participate in event details, e.g., the alert modal
    return detect(when(current_p50 > fire_threshold) and on_ and historical_p50 is not None,
                  off=when(current_p50 < clear_threshold) and off_, annotations=ann,
                  event_annotations=event_ann, auto_resolve_after=auto_resolve_after)
